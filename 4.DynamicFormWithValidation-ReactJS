
import React, { useState } from "react";

function App() {
  const [form, setForm] = useState([{
    Platform: "",
    Username: "",

    errors: {
      Platform: null,
      Username: null,
    },
  }]);

  const prevIsValid = () => {
    if (form.length === 1 && form[0].Platform!=="" && form[0].Username!=="") {
      return true;
    }

    const someEmpty = form.some(
      (item) => item.Username === "" || item.Platform === ""
    );

    if (someEmpty) {
      form.map((item, index) => {
        const allPrev = [...form];

        if (form[index].Platform === "") {
          allPrev[index].errors.Platform = "Platform is required";
        }

        if (form[index].Username === "") {
          allPrev[index].errors.Username = "Username is required";
        }
        setForm(allPrev);
      });
    }

    return !someEmpty;
  };

  const handleAddLink = (e) => {
    e.preventDefault();
    const inputState = {
      Platform: "",
      Username: "",

      errors: {
        Platform: null,
        Username: null,
      },
    };

      setForm((prev) => [...prev, inputState]);
  };

  const onChange = (index, event) => {
    event.preventDefault();
    event.persist();

    setForm((prev) => {
      return prev.map((item, i) => {
        if (i !== index) {
          return item;
        }

        return {
          ...item,
          [event.target.name]: event.target.value,

          errors: {
            ...item.errors,
            [event.target.name]:
              event.target.value.length > 0
                ? null
                : [event.target.name] + " Is required",
          },
        };
      });
    });
  };

  const handleRemoveField = (e, index) => {
    e.preventDefault();

    setForm((prev) => prev.filter((item) => item !== prev[index]));
  };

  function submitHandler(e){
    e.preventDefault();
  if(prevIsValid()){
    console.log(form);
  }  
}

  return (
    <div>
      <form onSubmit={submitHandler}>
        {form.map((item, index) => (
          <div  key={`item-${index}`}>
            <div >
              <input
                type="text"
               
                name="Platform"
                placeholder="Platform"
                value={item.Platform}
                onChange={(e) => onChange(index, e)}
              />

              {item.errors.Platform && (
                <div className="invalid-feedback">{item.errors.Platform}</div>
              )}
            </div>

            <div >
              <input
                type="text"
               
                name="Username"
                placeholder="Username"
                value={item.Username}
                onChange={(e) => onChange(index, e)}
              />

              {item.errors.Username && (
                <div>{item.errors.Username}</div>
              )}
            </div>
            <button onClick={handleAddLink}>
            Add
          </button>
            <button
              
              onClick={(e) => handleRemoveField(e, index)}
            >
              X
            </button>
          </div>
        ))}
<button type="submit">Submit</button>
        
      </form>
    </div>
  );
}

export default App;

