-------------------------------
// change Event
// this way of mentioning function type is known as function signature(syntatic sugar for mentioning Function keyword)
()=>void (rather than mentioning Function keyword)
type Props = {
 changeHandler : (event : React.ChangeEvent<HTMLInputElement> ) => void 
}

//click Event 
type Props = {
  clickHandler : (event : React.MouseEvent<HTMLElement> , id: number) => void;
}

// style Event

type Props = {
 styles : React.CSSProperties
}
-------------------------------------

Type Casting
Example : here typecasting keyword is 'as'
this will look for HTMLElements with form tag that has className as new-item-form
const form = document.querySelector('.new-item-form') as HTMLFormElement ; 

---------------------
non-nullish operator (!)

const nonnullish = document.querySelector('a')!
console.log(nonnullish.href)

if you don't specify ! then there will be red lines on href

-----------------------

GENERICS
// for dynamic property allocation(which can be of any type in future) we use Generic
// here extends object means only object is allowed , but object property can be anything
// T can be any type, and TypeScript will infer it when you use the function.

// PROS : You donâ€™t have to rewrite the same function for different types.

const addUID = <T extends object>(obj:T) => {
  let uid = Math.floor(Math.random()*100)
  return {...obj,uid}
}

let docOne = addUID({name:'vignesh',age:26})
console.log(docOne.name)

------------------------------

ENUMS

//allow you to define a set of named constants.providing meaningful names to constants

// Define an enum for different types of days in a week
enum Day {
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
    Sunday
}

// Function to get the full name of a day based on the enum value
function getFullDayName(day: Day): string {
    switch (day) {
        case Day.Monday:
            return "Monday";
        case Day.Tuesday:
            return "Tuesday";
        case Day.Wednesday:
            return "Wednesday";
        case Day.Thursday:
            return "Thursday";
        case Day.Friday:
            return "Friday";
        case Day.Saturday:
            return "Saturday";
        case Day.Sunday:
            return "Sunday";
        default:
            // This should never happen, but TypeScript requires a default case
            return "Unknown day";
    }
}

// Using the enum and the function
let today: Day = Day.Monday;
console.log("Today is " + getFullDayName(today));

let tomorrow: Day = Day.Tuesday;
console.log("Tomorrow will be " + getFullDayName(tomorrow));

---------------------------------

TUPLES

// much like array type except element position type is fixed in tuples once it is initialized

Example 

let tupleExample:[string,number,boolean] = ['vignesh',26,true]

tupleExample[0] = 'updatedVignesh' --> works
tupleExample[0] = false --> wrong because position type mismatch

-----------------------------------

React UseState

type AuthUser = {
 name : string
 age : boolean
}

const[state,setState] = useState<AuthUser | null>(null)

setState({username:'vignesh',age:26})

Important:
Type Assertion Example (same as type casting) using 'as' as keyword
Here only on componentDidMount it will be null , after that it will never be null .
const [state,setState] = useState<AuthUser>({} as AuthUser)
-----------------------

React Children 

type props = {
 children : React.ReactNode
}

-------------------------

useRef 

const inputRef = useRef<HTMLInputElement>(null)

const onSubmitHandler = () => {
 console.log(inputRef.current?.value)
}

<input type="text" ref={inputRef}/>
