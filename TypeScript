-------------------------------
// change Event
type Props = {
 changeHandler : (event : React.ChangeEvent<HTMLInputElement> ) => void 
}

//click Event 
type Props = {
  clickHandler : (event : React.MouseEvent<HTMLElement> , id: number) => void;
}

// style Event

type Props = {
 styles : React.CSSProperties
}
-------------------------------------

Type Casting
Example : here typecasting keyword is 'as'
this will look for HTMLElements with form tag that has className as new-item-form
const form = document.querySelector('.new-item-form') as HTMLFormElement ; 

---------------------
non-nullish operator (!)

const nonnullish = document.querySelector('a')!
console.log(nonnullish.href)

if you don't specify ! then there will be red lines on href

-----------------------

GENERICS

//here extends object means only object is allowed by object property can be anything
const addUID = <T extends object>(obj:T) => {
  let uid = Math.floor(Math.random()*100)
  return {...obj,uid}
}

let docOne = addUID({name:'vignesh',age:26})
console.log(docOne.name)

------------------------------

ENUMS

each of the element in enums is associated with specific number(index) , so that user don't have to remember and specify the correct number

enum ResourceType {BOOK,AUTHOR,FILM,DIRECTOR}

interface Resource {
resourceType : ResourceType
}

const docOne:Resource<object> = {
 resourceType: ResourceType.Book
}

console.log(docOne)
